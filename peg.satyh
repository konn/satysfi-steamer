@require: list
@import: local-string

module PEG : sig

  type 'a peg
  type 'a tagged-string

  val untag              : 'a tagged-string -> string
  val view-tagged-string : 'a tagged-string -> 'a option * string * ('a tagged-string) list
  val split-into-tags    : 'a tagged-string -> ('a option * string) list

  val pp-peg-with     : ('a -> string) -> 'a peg -> string
  val pp-peg          : 'a peg -> string
  val rule            : 'a -> 'a peg
  val epsilon         : 'a peg
  val fail            : 'a peg
  val lookahead       : 'a peg -> 'a peg
  val string          : string -> 'a peg
  val in-class        : string -> 'a peg
  val not-in-class    : string -> 'a peg
  val not-followed-by : 'a peg -> 'a peg
  val any-char        : 'a peg
  val optional        : 'a peg -> 'a peg
  val many            : 'a peg -> 'a peg
  val some            : 'a peg -> 'a peg
  val choice          : 'a peg -> 'a peg -> 'a peg
  val choices         : ('a peg) list -> 'a peg
  val append          : 'a peg -> 'a peg -> 'a peg
  val cat             : ('a peg) list -> 'a peg

  val alpha           : 'a peg
  val digit           : 'a peg
  val alphanum        : 'a peg
  val eos             : 'a peg
  val eol             : 'a peg   % CR, LF or End-of-String
  val char-but        : 'a peg -> 'a peg
  val spaces          : 'a peg
  val spaces1         : 'a peg

  % val peg-match     : peg -> string -> bool
  % val peg-search    : peg -> string -> int -> int option
  val peg-scan : ('a -> 'a peg) -> 'a peg -> string -> ('a tagged-string * string) option

end = struct

  type 'a peg =
    NonTerminal   of 'a
  | AnyChar       of unit
  | Fail          of unit
  | Epsilon       of unit
  | Lookahead     of 'a peg
  | String        of string
  | InClass       of string
  | Optional      of 'a peg
  | Many          of 'a peg
  | Choices       of ('a peg) list
  | Cat           of ('a peg) list
  | NotFollowedBy of 'a peg
  | Alpha         of unit
  | Digit         of unit
  | AlphaNum      of unit
  | EOS           of unit

  type 'a tagged-string =
       TagStr of 'a option * string * ('a tagged-string) list

  let untag | (TagStr(ma , str , lst)) = str

  let view-tagged-string
  | (TagStr(ma, str , lst)) = (ma, str, lst)

  let is-some s =
    match s with
    | Some(a) -> true
    | None    -> false

  let-rec split-into-tags
  | (TagStr(None, str, lst)) =
    let go l (b, rs) =
        let ls = split-into-tags l in
        let nontriv = LocalList.any (fun (a, b) -> is-some a) ls in 
        (b || nontriv , List.append ls rs)
    in
    let (q, bs) = LocalList.fold-right go (false, []) lst in
    if q then bs else [(None , str)]
  | (TagStr(Some(b), str, lst)) = [(Some(b), str)]

  let escape-onestep c =
    if string-same c (string-unexplode [9])
    then `\t`
    else if string-same c (string-unexplode [10])
    then `\n`
    else if string-same c (string-unexplode [13])
    then `\r`
    else if string-same c `.`
    then `\.`
    else c

  let-rec escape-specials-aux acc str =
    let len = string-length str in
    if len == 0
    then acc
    else
    let (c, rest) = LocalString.split-at 1 str
    in escape-specials-aux (acc ^ escape-onestep c) rest

  let escape-specials = escape-specials-aux LocalString.string-empty

  let eos = EOS
  let any-char = AnyChar
  let rule a = NonTerminal(a)
  let fail   = Fail
  let epsilon = Epsilon
  let string str = String(str)
  let in-class cls = InClass(cls)
  let lookahead p = Lookahead(p)
  let optional re = Optional(re)
  let many re = Many(re)
  let some re = Cat([re ; Many re])
  let choices ls = Choices(ls)
  let choice l r = choices [l ; r]
  let cat ps     = Cat(ps)
  let append l r = Cat([l ; r])
  let not-followed-by pg = NotFollowedBy(pg)
  let not-in-class str = append (not-followed-by (in-class str)) any-char
  let eol = choice (in-class (string-unexplode [10 ; 13])) eos
  let alpha = Alpha
  let digit = Digit
  let alphanum = AlphaNum
  let char-but p = append (not-followed-by p) any-char
  let spaces  = many (in-class (string-unexplode [9; 10; 12; 32]))
  let spaces1 = some (in-class (string-unexplode [9; 10; 12; 32]))

  let string-empty = string-unexplode []

  let-rec string-any p str =
    if string-length str == 0
    then false
    else if string-same p (string-sub str 0 1)
    then true
    else string-any p (string-sub str 1 (string-length str - 1))

  let-rec option-union
  | (None)    l = l
  | (Some(a)) r = Some(a)

  let unary-fixity  = 10
  let choice-fixity = 15
  let cat-fixity = 20
  let post-fixity = 30

  let paren show s = if show then `(` ^ s ^ `)` else s

  let-rec pp-peg-with-prec
  | d pp (Alpha)            = `[a-zA-Z]`
  | d pp (Digit)            = `[0-9]`
  | d pp (AlphaNum)         = `\w`
  | d pp (NotFollowedBy(p)) = `(?!` ^ pp-peg-with-prec unary-fixity pp p ^ `)`
  | d pp (NonTerminal(b)) = `'` ^ pp b
  | d pp (AnyChar) = `.`
  | d pp (Fail) = `_|_`
  | d pp (Epsilon) = ` `
  | d pp (Lookahead p) = `(?=` ^ pp-peg-with-prec unary-fixity pp p ^ `)`
  | d pp (String str)  = escape-specials str
  | d pp (InClass cls) = `[` ^ escape-specials cls ^ `]`
  | d pp (Optional p)  = pp-peg-with-prec post-fixity pp p ^ `?`
  | d pp (Many p)      = pp-peg-with-prec post-fixity pp p ^ `*`
  | d pp (Choices []) = `_|_`
  | d pp (Choices alt) = paren (d > choice-fixity) (LocalString.join-strings `/` (List.map (pp-peg-with-prec choice-fixity pp) alt))
  | d pp (Cat ps) = paren (d > cat-fixity) (LocalString.cat-strings (List.map (pp-peg-with-prec cat-fixity pp) ps))
  | d pp (EOS)      = `$`

  let pp-peg-with = pp-peg-with-prec unary-fixity
  let pp-peg = pp-peg-with (fun a -> `_`)

  let-rec peg-scan rules peg input =
    match peg with
    | (Alpha) -> peg-scan rules (in-class `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`) input
    | (Digit) -> peg-scan rules (in-class `0123456789`) input
    | (AlphaNum) -> peg-scan rules (in-class `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789`) input
    | (NotFollowedBy(p)) ->
       (match peg-scan rules p input with
       | None -> Some(TagStr(None, string-empty, []), input)
       | Some(x,z) -> None
       )
    | (NonTerminal(b)) ->
      (match peg-scan rules (rules b) input with
      | None -> let () = display-message `Non-terminal mismatch` in None
      | Some(TagStr(m, str, chs), rest) -> Some(TagStr(Some(b), str, [TagStr(m, str, chs)]), rest)
      )
    | (AnyChar) ->
      if string-length input == 0
      then let () = display-message (`No any char: "` ^ input ^ `"`) in None 
      else let (c, rest) = LocalString.split-at 1 input
           in Some(TagStr(None, c, []), rest)
    | (Fail) -> None
    | (Epsilon) -> Some(TagStr(None, string-empty, []), input)
    | (Cat(ps)) ->
      let go m p =
          (match m with
          | None -> None
          | Some(acc, str, chs) ->
             (match peg-scan rules p str with
             | None -> None
             | Some(ch, rest) -> Some(acc ^ untag ch , rest, List.append chs [ch])
             )
          )
      in (match List.fold-left go (Some(string-empty, input, [])) ps with
         | None -> None
         | Some(txt, rest, chs) -> Some(TagStr(None, txt, chs), rest)
         )
    | (Lookahead(p)) ->
       (match peg-scan rules p input with
        | Some(tstr, r) -> Some(TagStr(None, string-empty, []), input)
        | None       -> None
        )
    | (String(str)) ->
      if string-length input < string-length str  
      then None
      else let (lh, rh) = LocalString.split-at (string-length str) input in
      if string-same lh str
      then Some(TagStr(None, str, []), rh)
      else None
    | (InClass(str)) ->
      if string-length input == 0
      then None
      else let (c, rest) = LocalString.split-at 1 input
           in if string-any c str
           then Some(TagStr(None, c, []), rest)
           else None
    | (Optional(p)) ->
      (match peg-scan rules p input with
      | None -> Some(TagStr(None, string-empty, []), input)
      | Some(tstr, r) -> Some(TagStr(None, untag tstr, [tstr]), r)
      )
    | (Choices(ps)) ->
      let mans = LocalList.fold-right option-union None
                 (List.map (fun p -> peg-scan rules p input) ps)
      in (match mans with
         | None -> None
         | Some(tstr, rest) -> Some(TagStr(None, untag tstr, [tstr]), rest)
         )
    | (Many(p)) ->
      if string-length input == 0
      then Some(TagStr(None, string-empty, []), input)
      else
      (match peg-scan rules p input with
      | None -> Some(TagStr(None, string-empty, []), input)
      | Some(c, r) ->
        (match peg-scan rules (Many(p)) r with
        | None -> Some(TagStr(None, untag c, [c]), r)
        | Some(TagStr(z, str, chs), s) ->
           Some(TagStr(None, untag c ^ str, c :: chs), s)
        ))
    | (EOS) ->
       if string-length input == 0
       then Some(TagStr(None, string-empty, []), input)
       else None
end

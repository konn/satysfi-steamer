module Option : sig
  val fmap : ('a -> 'b) -> 'a option -> 'b option
  val from : 'a -> 'a option -> 'a
  val bind : 'a option -> ('a -> 'b option) -> 'b option
  val show : ('a -> string) -> 'a option -> string
end = struct
  let-rec from
  | a (None) = a
  | z (Some(a)) = a

  let-rec fmap
  | f (None) = None
  | f (Some(a)) = Some(f a)

  let-rec show
  | f (None)    = `None`
  | f (Some(a)) = `Some(` ^ f a ^ `)`

  let-rec bind
  | (None)    f = None
  | (Some(a)) f = f(a)
end
% Syntax Highlighting, Lite Edition.
@require: list
@require: color
@require: gr
@require: vdecoset
@import: decoset
@import: local-list
@import: peg
@import: local-string
@import: option

module Hilite : sig

  type 'a syntax
  type coloring
  type 'a token
  type simple-token
  type satysfi-aux
  val highlight    : context -> coloring -> 'a syntax -> string -> inline-boxes
  val empty-syntax : 'a syntax
  val default-coloring : coloring
  val make-simple-theme : color -> coloring
  val build-peg : 'aux syntax ->  'aux token -> ('aux token) PEG.peg
  val satysfi-syntax : satysfi-aux syntax
  val parse-syntax : 'a syntax -> string -> (('a token) PEG.tagged-string * string) option

  val comment   : 'a token
  val keyword   : 'a token
  val primitive : 'a token
  val string    : 'a token
  val number    : 'a token
  val normal    : 'a token
  val commandR  : 'a token

  direct \code :[inline-text] inline-cmd
  direct \meta :[math] inline-cmd
  direct \hcode : [coloring?; ('a syntax)?; string] inline-cmd
  direct +code : [length?; string] block-cmd
  direct +hcode : [length?; coloring?; ('a syntax)?; string] block-cmd
  direct +console : [length?; string] block-cmd

end = struct
  type 'a token
    = Keyword
    | Primitive
    | Command
    | String
    | Number
    | Normal
    | Comment
    | Spaces
    | OtherChar
    | Custom of 'a

  type satysfi-aux
    = StringBody
    | StringContent

  type void = Dummy
  type simple-token = void token

  let keyword   = Keyword
  let primitive = Primitive
  let commandR  = Command
  let string    = String
  let number    = Number
  let normal    = Normal
  let comment   = Comment

  type 'a syntax =
      (| keywords     : string list
       ; primitives   : string list
       ; commands     : ('a token) PEG.peg
       ; string       : ('a token) PEG.peg
       ; number       : ('a token) PEG.peg
       ; comment      : ('a token) PEG.peg
       ; symbol-chars : ('a token) PEG.peg
       ; open-parens  : string
       ; close-parens : string
       ; custom-rules : 'a -> ('a token) PEG.peg
       |)

   let empty-syntax : 'a syntax =
      (| keywords     = []
       ; primitives   = []
       ; commands     = PEG.fail
       ; string       = PEG.fail
       ; number       = PEG.fail
       ; comment      = PEG.fail
       ; symbol-chars = PEG.fail
       ; open-parens  = LocalString.string-empty
       ; close-parens = LocalString.string-empty
       ; custom-rules = (fun b -> PEG.fail)
       |)

  let build-peg : syntax -> token -> token PEG.peg
  | synt tk =
    let symchar = synt#symbol-chars in
    let delim = PEG.choices [ PEG.spaces1 ; PEG.not-followed-by symchar ] in
    let reserved str = PEG.cat [PEG.string str ; PEG.not-followed-by symchar; delim] in
    let reserveds syms = PEG.choices (List.map reserved syms) in
    let lexeme p = PEG.cat [p; delim] in
    match tk with
     | Keyword   -> reserveds synt#keywords
     | Primitive -> reserveds synt#primitives
     | Command   -> lexeme synt#commands
     | String    -> lexeme synt#string
     | Number    -> lexeme synt#number
     | Normal    -> PEG.some symchar
     | Comment   -> PEG.cat [ synt#comment ; PEG.lookahead PEG.eos ]
     | Spaces    -> delim
     | OtherChar -> PEG.char-but  symchar
     | Custom r  -> synt#custom-rules r 


   let program-line =
     PEG.cat [ PEG.spaces 
             ; PEG.some
               (PEG.choices [ PEG.rule Comment
                            ; PEG.rule String
                            ; PEG.rule Number
                            ; PEG.rule Keyword
                            ; PEG.rule Primitive
                            ; PEG.rule Command
                            ; PEG.rule Normal
                            ; PEG.rule OtherChar
                            ])
             ; PEG.eos
             ]

  let parse-syntax synt str = PEG.peg-scan (build-peg synt) program-line str

  let satysfi-syntax : satysfi-aux syntax =
    let quote = PEG.string (string-unexplode [96]) in
    let symb-chars = PEG.choice PEG.alphanum (PEG.string `-`) in
    let symbol p = PEG.cat [PEG.string p; PEG.not-followed-by symb-chars] in
    let measure = PEG.choices (List.map symbol [`pt`; `mm`; `cm`; `inch`]) in
    let aux-rules b = 
        (match b with
         | StringBody ->
             PEG.choices [ PEG.cat [quote ; PEG.rule (Custom(StringBody)); quote]
                         ; PEG.rule (Custom(StringContent))
                         ]
         | StringContent ->
             PEG.some (PEG.char-but quote)
         ) in 
    (| keywords =
           [ `let-inline`; `let`; `let-rec`; `let-mutable`
           ; `let-block`; `in`; `match`; `with`; `type`
           ; `let-math`; `math`; `sig`; `structure` ; `direct`
           ; `val`; `constraint`; `fun`; `before`; `of`
           ; `if`; `then`; `else`; `end`; `as`; `!`; `<-`
           ; `@import:`; `@require:`
           ]
     ; primitives = [ `read-inline`; `get-font-size` ; `set-font-size`
                    ; `true`; `false` ]
     ; commands = PEG.choices
                [ PEG.cat [ PEG.string `\`
                          ; PEG.some symb-chars
                          ]
                ; PEG.cat [ PEG.string `+`
                          ; PEG.some symb-chars
                          ]
                ]
     ; string = PEG.choices
              [ PEG.cat
                  [ quote
                  ; PEG.rule (Custom(StringBody))
                  ; quote
                  ]
              ]
     ; number =
           PEG.cat
              [ PEG.optional (PEG.cat [PEG.string `-`; PEG.spaces] )
              ; PEG.choices
                [
                   PEG.cat
                     [ PEG.some PEG.digit
                     ; PEG.optional (
                         PEG.cat [ PEG.string `.`
                                 ; PEG.many PEG.digit]
                       )
                     ]
                ; PEG.cat [ PEG.string `.`
                          ; PEG.some PEG.digit]
                ]
              ; PEG.optional measure
              ]
     ; comment = PEG.cat [ PEG.string `%`
                         ; PEG.many (PEG.char-but PEG.eos)
                         ]
     ; symbol-chars = PEG.choice PEG.alphanum (PEG.string `-`)
     ; open-parens  = `({[<`
     ; close-parens = `]})>`
     ; custom-rules = aux-rules
     |)

   type coloring =
       (| keywords   : color
        ; primitives : color
        ; commands   : color
        ; string     : color
        ; number     : color
        ; normal     : color
        ; comment    : color
        |)

   let rgb r g b = RGB(float r /. 255., float g /. 255., float b /. 255. )

   let default-coloring =
                 (| keywords   = rgb 141 0 235
                  ; commands   = rgb 117 112 255
                  ; number     = Color.orange
                  ; string     = Color.orange
                  ; primitives = Color.red
                  ; normal     = Color.black
                  ; comment    = rgb 160 17 17
                  |) % |=

  let make-simple-theme col =
        (| keywords   = col
         ; commands   = col
         ; number     = col
         ; string     = col
         ; primitives = col
         ; normal     = col
         ; comment    = col
         |)

  let-rec zip-with
    | f xs [] = []
    | f [] ys = []
    | f (x :: xs) (y :: ys) = f x y :: zip-with f xs ys

  let zip = zip-with (fun x y -> (x, y))

  let alternatives lst =
    `^\(` ^ LocalString.join-strings  `\|` lst ^ `\)$`

  let colorise ctx theme synt (stok, str) =
      let c = match stok with
              | Some(Keyword)   -> theme#keywords
              | Some(Primitive) -> theme#primitives
              | Some(Command)   -> theme#commands
              | Some(String)    -> theme#string
              | Some(Number)    -> theme#number
              | Some(Comment)   -> theme#comment
              | z               -> theme#normal
      in
      let col-ctx = ctx |> set-text-color c in
      read-inline col-ctx (embed-string str)

  let (<!>) = Option.fmap
  let (<&>) a b = Option.fmap b a
  let highlight ctx coloring synt str =
    let mtks = (parse-syntax synt str) <&> (fun (a, b) -> PEG.split-into-tags a)
    in
    match mtks with
    | None -> read-inline (ctx |> set-text-color coloring#normal) (embed-string str)
    | Some(tks) -> LocalList.fold-right (++) inline-nil (List.map (colorise ctx coloring synt) tks)

  let from-option a m =
    match m with
    | Some(b) -> b
    | None    -> a

  let code-fill-color = (RGB(0.975, 0.975, 1.))
  let code-stroke-color = (RGB(0., 0., 0.25))
  let console-fill-color = (Gray(0.25))

  let decoset-code =
    VDecoSet.simple-frame 1pt code-stroke-color code-fill-color

  let dummy _ =
    let strokef = stroke 1pt code-stroke-color in
    let gr-back x y w d h =
      fill code-fill-color (Gr.rectangle (x, y -' d) (x +' w, y +' h))
    in
    let decoS (x, y) w h d =
      [
        gr-back x y w d h;
        strokef (Gr.rectangle (x, y -' d) (x +' w, y +' h));
      ]
    in
    let decoH (x, y) w h d =
      [
        gr-back x y w d h;
        strokef (Gr.poly-line (x, y -' d) [(x, y +' h); (x +' w, y +' h); (x +' w, y -' d);])
      ]
    in
    let decoM (x, y) w h d =
      [
        gr-back x y w d h;
        strokef (Gr.line (x, y -' d) (x, y +' h));
        strokef (Gr.line (x +' w, y -' d) (x +' w, y +' h));
      ]
    in
    let decoT (x, y) w h d =
      [
        gr-back x y w d h;
        strokef (Gr.poly-line (x, y +' h) [(x, y -' d); (x +' w, y -' d); (x +' w, y +' h)])
      ]
    in
      (decoS, decoH, decoM, decoT)


  let decoset-console =
    let deco (x, y) w h d =
      [ fill console-fill-color (Gr.rectangle (x, y -' d) (x +' w, y +' h)) ]
    in
      (deco, deco, deco, deco)

  let code-scheme : length option -> decoset -> coloring -> syntax -> context -> string -> block-boxes
  | msize decoset coloring syntax ctx code =
      let pads = (5pt, 5pt, 5pt, 5pt) in
      let size =
        match msize with
        | Some(size) -> size
        | None -> get-font-size ctx in
      let ctxSize = ctx |> set-font-size size in
      block-frame-breakable ctxSize pads decoset (fun ctx -> (
        let fontsize = get-font-size ctx in
        let charwid = get-natural-width (read-inline ctx {0}) in
        let ctx-code =
          ctx |> set-font Latin (`Menlo`, 1., 0.)
              |> set-font Kana  (`Osaka`, .88, 0.)
              |> set-font HanIdeographic  (`Osaka`, .88, 0.)
              |> set-space-ratio (charwid /' fontsize)
        in
   
        let lstraw = split-into-lines code in
        let lst =
          match lstraw with
          | []        -> lstraw
          | x :: []   -> lstraw
          | _ :: tail -> tail
        in
        let ib-code =
          lst |> List.fold-left-adjacent (fun ibacc (i, s) _ optnext -> (
            let ib-last =
              match optnext with
              | Some(_) -> inline-fil ++ discretionary 0 (inline-skip ((get-text-width ctxSize) *' 2.)) inline-nil inline-nil
              | None    -> inline-fil
            in
            let ib =
              inline-skip (charwid *' (float i))
                ++ highlight ctx-code coloring syntax s
                ++ ib-last
            in
              ibacc ++ ib
          )) inline-nil
        in
          line-break true true ctx ib-code
      ))

  let-block ctx +code ?:size code =
    code-scheme
      size
      decoset-code
      default-coloring
      empty-syntax
      (ctx |> set-font Latin (`Menlo`, .8, 0.))
      code

  let-block ctx +hcode ?:size ?:mcol ?:msynt code =
    let col = match mcol with
              | Some(col) -> col
              | None      -> default-coloring in
    let synt = match msynt with
               | Some(syn) -> syn
               | None      -> empty-syntax in
    code-scheme
      size
      decoset-code
      col
      synt
      (ctx |> set-font Latin (`Menlo`, .8, 0.)) code

  let-block ctx +console ?:size code =
    let coloring = make-simple-theme Color.white in
    code-scheme
      size
      decoset-console
      coloring
      empty-syntax
      (ctx |> set-font Latin (`Menlo`, .8, 0.))
      code

  let name-context ctx =
    ctx |> set-dominant-narrow-script Latin
        |> set-font Latin (`Menlo`, 1., 0.)
        |> set-text-color Color.red

  let-inline ctx \meta m =
    let ctx-meta =
      ctx |> set-text-color Color.orange
          |> set-font Latin Steamer.font-latin-italic
          |> set-font Latin (`Menlo`, .8, 0.)
    in
      embed-math ctx-meta m

  let-inline ctx \code inner =
    let pads-code = (2pt, 2pt, 2pt, 2pt) in
    let decoset-code = DecoSet.rectangle-round-fill 4pt 2pt (Color.gray 0.9) in
    let ctx-code =
      name-context ctx
        |> set-math-command (command \meta)
    in
    let ib-frame =
      inline-frame-breakable pads-code decoset-code
        (read-inline ctx-code inner)
    in
      script-guard Latin ib-frame

  let-inline ctx \hcode ?:mcol ?:msynt src =
    let col = match mcol with
              | Some(col) -> col
              | None      -> default-coloring in
    let synt = match msynt with
               | Some(syn) -> syn
               | None      -> empty-syntax in
    highlight (ctx |> set-font Latin (`Menlo`, .8, 0.)) col synt src

end

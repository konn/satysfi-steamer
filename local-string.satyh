@import: local-list
@require: list

module LocalString : sig
  val join-strings: string -> string list -> string
  val cat-strings: string list -> string
  val unwords: string list -> string
  val string-empty : string
  val space: string
  val spaces : int -> string
  val split-at: int -> string -> string * string
end = struct
  let string-empty = string-unexplode []

  let join-strings sep strs =
    match strs with
    | [] -> ` `
    | (x :: xs) -> List.fold-left (fun l r -> l ^ sep ^ r) x xs

  let cat-strings = LocalList.fold-right (^) ` `

  let unwords = join-strings (string-unexplode [32])

  let space = string-unexplode [32]
  let spaces n = cat-strings (LocalList.replicate n (string-unexplode [32]))

  let split-at pos str =
      let len = string-length str in
      if pos <= 0
      then (string-empty, str)
      else if len < pos
      then (str, string-empty)
      else (string-sub str 0 pos, string-sub str pos (len - pos))
end
